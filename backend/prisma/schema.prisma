// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DifficultyLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum GameType {
  WORD_MATCH
  TRANSLATION
  STORY_COMPLETION
}

enum GenerationJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProficiencyLevel {
  A1
  A2
  B1
  B2
  C1
  C2
}

model User {
  id                Int                    @id @default(autoincrement())
  firebaseId        String                 @unique
  email             String                 @unique
  name              String?
  photoURL          String?
  role              Role                   @default(USER)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  wordProgress      UserWordProgress[]
  gameResults       GameResult[]
  stories           Story[]
  generationJobs    StoryGenerationJob[]
  generationCriteria StoryGenerationCriteria[]
}

model Word {
  id              Int                @id @default(autoincrement())
  text            String
  meaning         String
  example         String?
  difficultyLevel DifficultyLevel
  languageId      Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  letterCount     Int
  language        Language           @relation(fields: [languageId], references: [id])
  progress        UserWordProgress[]
  categories      WordCategory[]
  storyWords      StoryWord[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  words       WordCategory[]
}

model WordCategory {
  wordId      Int
  categoryId  Int
  word        Word     @relation(fields: [wordId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])

  @@id([wordId, categoryId])
}

model Language {
  id                Int               @id @default(autoincrement())
  name              String
  code              String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  words             Word[]
  sourceLanguages   LanguagePair[]    @relation("SourceLanguage")
  targetLanguages   LanguagePair[]    @relation("TargetLanguage")
  stories           Story[]
}

model Translation {
  id              Int          @id @default(autoincrement())
  sourceText      String
  targetText      String
  languagePairId  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  languagePair    LanguagePair @relation(fields: [languagePairId], references: [id])
}

model LanguagePair {
  id                Int          @id @default(autoincrement())
  sourceLanguageId  Int
  targetLanguageId  Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  sourceLanguage    Language     @relation("SourceLanguage", fields: [sourceLanguageId], references: [id])
  targetLanguage    Language     @relation("TargetLanguage", fields: [targetLanguageId], references: [id])
  translations      Translation[]
}

model Story {
  id                Int                 @id @default(autoincrement())
  title             String
  content           String
  difficultyLevel   DifficultyLevel
  languageId        Int
  userId            Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  language          Language            @relation(fields: [languageId], references: [id])
  user              User                @relation(fields: [userId], references: [id])
  generationJobs    StoryGenerationJob[]
  words             StoryWord[]
}

model StoryWord {
  id        Int      @id @default(autoincrement())
  storyId   Int
  wordId    Int
  order     Int
  story     Story    @relation(fields: [storyId], references: [id])
  word      Word     @relation(fields: [wordId], references: [id])

  @@unique([storyId, wordId])
}

model StoryGenerationJob {
  id          Int                     @id @default(autoincrement())
  status      GenerationJobStatus
  result      String?
  storyId     Int
  criteriaId  Int
  userId      Int
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  story       Story                   @relation(fields: [storyId], references: [id])
  criteria    StoryGenerationCriteria @relation(fields: [criteriaId], references: [id])
  user        User                    @relation(fields: [userId], references: [id])
}

model StoryGenerationCriteria {
  id              Int                 @id @default(autoincrement())
  name            String
  description     String?
  parameters      Json
  userId          Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id])
  generationJobs  StoryGenerationJob[]
}

model UserWordProgress {
  id              Int             @id @default(autoincrement())
  userId          Int
  wordId          Int
  proficiencyLevel ProficiencyLevel
  reviewCount     Int
  lastReviewedAt  DateTime
  user            User            @relation(fields: [userId], references: [id])
  word            Word            @relation(fields: [wordId], references: [id])

  @@unique([userId, wordId])
}

model GameResult {
  id              Int             @id @default(autoincrement())
  userId          Int
  languageId      Int
  categoryId      Int?
  gameType        GameType
  score           Int
  correctAnswers  Int
  wrongAnswers    Int
  timeSpent       Int
  difficultyLevel DifficultyLevel?
  playedAt        DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
} 