generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum GameType {
  WORD_MATCH
  TRANSLATION
  STORY_COMPLETION
}

model User {
  id           Int      @id @default(autoincrement())
  firebase_uid String   @unique
  email        String?  @unique
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  game_results     GameResult[]
  stories          Story[]
  word_progress    UserWordProgress[]

  @@index([email])
  @@index([firebase_uid])
}

model Word {
  id              Int      @id @default(autoincrement())
  text            String
  language_code   String
  letter_count    Int      @default(0)
  difficulty_level DifficultyLevel
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  categories      WordCategory[]
  translations    Translation[]  @relation("SourceWord")
  target_translations Translation[] @relation("TargetWord")
  story_words     StoryWord[]
  game_words      GameWord[]
  user_progress   UserWordProgress[]

  @@unique([text, language_code])
  @@index([text, language_code])
  @@index([difficulty_level])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  words       WordCategory[]

  @@index([name])
}

model WordCategory {
  id          Int      @id @default(autoincrement())
  word_id     Int
  category_id Int
  created_at  DateTime @default(now())

  word       Word     @relation(fields: [word_id], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@unique([word_id, category_id])
  @@index([word_id])
  @@index([category_id])
}

model Translation {
  id              Int      @id @default(autoincrement())
  source_word_id  Int
  target_word_id  Int
  confidence_score Float?
  created_at      DateTime @default(now())

  source_word     Word     @relation("SourceWord", fields: [source_word_id], references: [id], onDelete: Cascade)
  target_word     Word     @relation("TargetWord", fields: [target_word_id], references: [id], onDelete: Cascade)

  @@unique([source_word_id, target_word_id])
  @@index([source_word_id])
  @@index([target_word_id])
}

model UserWordProgress {
  id              Int      @id @default(autoincrement())
  user_id         Int
  word_id         Int
  last_reviewed_at DateTime?
  next_review_at  DateTime?
  review_count    Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  word            Word     @relation(fields: [word_id], references: [id], onDelete: Cascade)

  @@unique([user_id, word_id])
  @@index([user_id])
  @@index([word_id])
  @@index([next_review_at])
}

model Story {
  id              Int      @id @default(autoincrement())
  title           String
  content         String   @db.Text
  difficulty_level DifficultyLevel
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_id         Int

  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  words           StoryWord[]

  @@index([difficulty_level])
  @@index([user_id])
}

model StoryWord {
  id        Int      @id @default(autoincrement())
  story_id  Int
  word_id   Int
  created_at DateTime @default(now())

  story     Story    @relation(fields: [story_id], references: [id], onDelete: Cascade)
  word      Word     @relation(fields: [word_id], references: [id], onDelete: Cascade)

  @@unique([story_id, word_id])
  @@index([story_id])
  @@index([word_id])
}

model GameResult {
  id        Int      @id @default(autoincrement())
  user_id   Int
  game_type GameType
  score     Int
  duration  Int      // saniye cinsinden
  created_at DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  words     GameWord[]

  @@index([user_id])
  @@index([game_type])
  @@index([created_at])
}

model GameWord {
  id            Int      @id @default(autoincrement())
  game_result_id Int
  word_id       Int
  is_correct    Boolean
  created_at    DateTime @default(now())

  game_result   GameResult @relation(fields: [game_result_id], references: [id], onDelete: Cascade)
  word          Word       @relation(fields: [word_id], references: [id], onDelete: Cascade)

  @@index([game_result_id])
  @@index([word_id])
} 